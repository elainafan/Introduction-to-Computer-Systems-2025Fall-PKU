################################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Describe how and why you modified the baseline code.
# I unrolled this loop tenfold, partitioned the intervals continuously 
# according to remainders from 0 to 9, 
# and processed the remainders in reverse order to ensure they fall correctly.
# Similar to the switch sentence we've studied before.
################################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
################################################################################
# You can modify this portion
	# Loop header
	iaddq $-10, %rdx # compute len minus 10,if less than 10, then jump to stage that deals with remainder.
	jl Less

Loop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	rmmovq %rbp, 72(%rsi) # tenfold
	jmp PD8

PD8:
	andq %r8,%r8
	jle PD9
	iaddq $1, %rax # if the first one is positive.

PD9:
	andq %r9,%r9
	jle PD10
	iaddq $1, %rax # if the second one is positive.

PD10:
	andq %r10,%r10
	jle PD11
	iaddq $1, %rax # if the third one is positive.

PD11:
	andq %r11,%r11
	jle PD12
	iaddq $1, %rax # if the fourth one is positive.

PD12:
	andq %r12,%r12
	jle PD13
	iaddq $1, %rax # if the fifth one is positive.

PD13:
	andq %r13,%r13
	jle PD14
	iaddq $1, %rax # if the sixth one is positive.

PD14:
	andq %r14,%r14
	jle PDCX
	iaddq $1, %rax # if the seventh one is positive.

PDCX:
	andq %rcx,%rcx
	jle PDBX
	iaddq $1, %rax # if the eighth one is positive.

PDBX:
	andq %rbx,%rbx
	jle PDBP
	iaddq $1, %rax # if the ninth one is positive.

PDBP:
	andq %rbp, %rbp
	jle RECOVER
	iaddq $1, %rax # if the tenth one is positive.

RECOVER:
	iaddq $80, %rdi
	iaddq $80, %rsi
	isubq $10, %rdx # forward the stage
	jge Loop # back to loop

Less:
	iaddq $10, %rdx
	jle Done # if less than 0, then return.
	isubq $4, %rdx # sort it into 1-3 and 4-9.
	jge Sort4
	iaddq $2, %rdx # sort it to 1,2,and 3.
	jl Back1
	je Back2
	jmp Back3

Sort4:
	je Back4 # if it is equal to 4,then jmp.
	isubq $2, %rdx # sort it to 5-6,and 7-9
	jl Back5
	je Back6

	isubq $2, %rdx # sort it to 7,8, and 9.
	jl Back7
	je Back8
	jmp Back9

Back9:
	mrmovq 64(%rdi), %r8
	rmmovq %r8, 64(%rsi)
	andq %r8, %r8 
	jle Back8 # fall through
	iaddq $1, %rax # if the ninth one is positive.

Back8:
	mrmovq 56(%rdi), %r9
	rmmovq %r9, 56(%rsi)
	andq %r9, %r9
	jle Back7 # fall through
	iaddq $1, %rax # if the eighth one is positive.

Back7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	jle Back6 # fall through
	iaddq $1, %rax # if the seventh one is positive.

Back6:
	mrmovq 40(%rdi), %r11
	rmmovq %r11, 40(%rsi)
	andq %r11, %r11
	jle Back5 # fall through
	iaddq $1, %rax # if the sixth one is positive.

Back5:
	mrmovq 32(%rdi), %r12
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12
	jle Back4 # fall through
	iaddq $1, %rax # if the fifth one is positive.

Back4:
	mrmovq 24(%rdi), %r13
	rmmovq %r13, 24(%rsi)
	andq %r13, %r13
	jle Back3 # fall through
	iaddq $1, %rax # if the fourth one is positive.

Back3:
	mrmovq 16(%rdi),%r14
	rmmovq %r14, 16(%rsi)
	andq %r14, %r14
	jle Back2 # fall through
	iaddq $1, %rax # if the third one is postive.

Back2:
	mrmovq 8(%rdi), %rcx
	rmmovq %rcx, 8(%rsi)
	andq %rcx, %rcx
	jle Back1 # fall through
	iaddq $1, %rax # if the second one is positive.

Back1:
	mrmovq (%rdi), %rbx
	rmmovq %rbx, (%rsi)
	andq %rbx, %rbx
	jle Done # fall through and return 
	iaddq $1, %rax # if the first one is positive.

Done:
	ret

# In grader, we will add a "trap: jmp trap" here, which traps your program in an
# infinite loop. Thus your function should always return instead of falling
# through till the end of the source code :)